package com.iceseto.mapper;

import com.iceseto.pojo.Brand;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.util.List;
import java.util.Map;

public interface BrandMapper {


    /**
     * 查询所有
     */
    List<Brand> selectALL();

    /**
     * 查看详情：根据id查询
     */

    @Select("select * from tb_brand where id = #{id}")
    Brand selectById(int i);

    /**
     * 根据条件查询
     *  *参数接收
     *    1 散装的参数 如果方法中有多个参数，需要使用@Param("SQL参数占位符名称")
     *    2 对象参数 对象的属性的名称 要和对应的参数占位符一致
     *    3 map集合参数
     * @param status
     * @param brandName
     * @param companyName
     * @return
     */

    //List<Brand> selectByConditon(@Param("status") int status, @Param("brandName") String brandName, @Param("companyName") String companyName);

    //List<Brand> selectByConditon(Brand brand);

    List<Brand> selectByConditon(Map map);


    /**
     * 单条件查询
     * @param brand
     * @return
     */
    List<Brand> selectByConditonSingle(Brand brand);


    /**
     * 添加
     */
    void add(Brand brand);

    /**
     * 修改全部信息
     */

    int update(Brand brand);

    /**
     * 根据id删除
     */
    void deleteById(int i);

    /**
     *  根据id 依次删除多个
     */
    void deleteByIds(@Param("ids") int[] ids);
}
package com.iceseto.pojo;

/**
 * 品牌
 *
 * alt + 鼠标左键：整列编辑
 *
 * 在实体类中，基本数据类型建议使用其对应的包装类型
 */

public class Brand {
    // id 主键
    private Integer id;
    // 品牌名称
    private String brandName;
    // 企业名称
    private String companyName;
    // 排序字段
    private Integer ordered;
    // 描述信息
    private String description;
    // 状态：0：禁用  1：启用
    private Integer status;


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getBrandName() {
        return brandName;
    }

    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public Integer getOrdered() {
        return ordered;
    }

    public void setOrdered(Integer ordered) {
        this.ordered = ordered;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Brand{" +
                "id=" + id +
                ", brandName='" + brandName + '\'' +
                ", companyName='" + companyName + '\'' +
                ", ordered=" + ordered +
                ", description='" + description + '\'' +
                ", status=" + status +
                '}';
    }
}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
        名称空间
-->
<mapper namespace="com.iceseto.mapper.BrandMapper">

    <!--
            数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
                *起别名:对不一样的列名起别名，让别名和实体类的属性名一样
                    *缺点: 每次查询都要定义一次别名
                        * sqL片段
                            *缺点:不灵活
            * resultMap:
                1.定义<resultMap>标签
                2。在<seLect>标签中，使用resultMap属性替换 resultType属性
    -->
    <resultMap id="brandResultMap" type="Brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>

    </resultMap>

    <!--id:唯一标识
    type: 映射的类型，支持别名
    -->
    <select id="selectALL" resultMap="brandResultMap">
        /*id:完成主键字段的映射
          column: 表的列名
          property: 实体类的属性名
          result: 完成一般字段的映射*/
        select *
        from tb_brand;
    </select>
    <!--statement-->
    <!--<sql id="sql_column">
        select id,brand_name as brandName,company_name as companyName,ordered,description,status
        from tb_brand;
    </sql>
    <select id="selectALL" resultType="com.iceseto.pojo.Brand">
        <include refid="sql_column"></include>
    </select>-->


    <!--<select id="selectALL" resultType="com.iceseto.pojo.Brand">
        # select *
        # from tb_brand;
    </select>-->


    <!--
                *参数占位符:
                1 #{}: 会将其替换为？ ，为了防止sql注入
                2 ${}: 拼sql，会存在sql注入的问题
                3 使用时机：
                    *参数传递的时候 用#{}
                    *表名或者列名不固定的情况下 ￥{} 会存在sql注入的问题

                *参数类型 parameterType:可以省略
                *特殊字符处理
                例 <
                处理方法
                1 转义字符
                2 CDATA区
    -->
    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id}
    </select>-->
    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>-->

    <!--
    条件查询
    -->
    <!--<select id="selectByConditon" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and brand_name like #{brandName}
          and company_name like #{companyName}
    </select>
-->
    <!--
    动态条件查询
     *问题：
       * 1. 恒等式
       * 2. <where>
    -->
    <select id="selectByConditon" resultMap="brandResultMap">
        select *
        from tb_brand
        /*where 1 = 1*/
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>
    <!--<select id="selectByConditonSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose>
            <when test="status != null">&lt;!&ndash;相当于case&ndash;&gt;
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''">&lt;!&ndash;相当于case&ndash;&gt;
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''">&lt;!&ndash;相当于case&ndash;&gt;
                brand_name like #{brandName}
            </when>
            <otherwise>
                1 = 1
            </otherwise>
        </choose>
    </select>-->
    <select id="selectByConditonSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null"><!--相当于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''"><!--相当于case-->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"><!--相当于case-->
                    brand_name like #{brandName}
                </when>

            </choose>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">

        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});

    </insert>

    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from tb_brand 
        where id = #{id};
    </delete>

    <!--
        MyBatis会将数组参数 封装为一个Map集合
            *默认： array = 数组
            * 使用@Param注解改变map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand 
        where id in
            <foreach collection="ids" item="id" separator="," close=")" open="(">
                #{id}
            </foreach>
    </delete>


</mapper>package com.iceseto.test;

import com.iceseto.mapper.BrandMapper;
import com.iceseto.pojo.Brand;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyBaitsTest {

    @Test
    public void testSelectALL() throws IOException {
        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession();

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        List<Brand> brands = BrandMapper.selectALL();
        System.out.println(brands);

        //5.释放资源
        sqlSession.close();
    }


    @Test
    public void testSelectBYid() throws IOException {
        //接收参数
        int i = 1;
        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession();

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        Brand brand = BrandMapper.selectById(i);
        System.out.println(brand);

        //5.释放资源
        sqlSession.close();
    }

    @Test
    public void testSelectByCondition() throws IOException {
        //接收参数
        int status = 1;
        String companyName = "华为";
        String brandName = "华为";

        //处理参数
        companyName = "%" +companyName +"%";
        brandName = "%" +brandName +"%";

      /*  //封装对象
        Brand brand = new Brand();
        brand.setStatus(status);
        brand.setBrandName(brandName);
        brand.setCompanyName(companyName);*/

        Map map = new HashMap<>();
        map.put("status",status);

        map.put("brandName",brandName);

        map.put("companyName",companyName);
        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession();

        //3.获取mapper接口的代理对象

        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法

        //List<Brand> list = BrandMapper.selectByConditon(status, brandName, companyName);

        List<Brand> brands = BrandMapper.selectByConditon(map);

        System.out.println(brands);

        //5.释放资源
        sqlSession.close();
    }


    @Test
    public void testSelectBYidSingle() throws IOException {
        //接收参数
        int status = 1;
        String companyName = "华为";
        String brandName = "华为";

        companyName = "%" + companyName +"%";
        brandName = "%" + brandName +"%";
        //封装对象
        Brand brand = new Brand();
        //brand.setCompanyName(companyName);
        //brand.setBrandName(brandName);
        //brand.setStatus(status);


        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession();

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        List<Brand> brands = BrandMapper.selectByConditonSingle(brand);

        System.out.println(brands);
        //5.释放资源
        sqlSession.close();
    }

    @Test
    public void testadd() throws IOException {
        //接收参数
        int status = 1;
        String companyName = "菠萝手机";
        String brandName = "菠萝";
        String description = "美国有苹果，中国有菠萝";
        int ordered = 100;

        //封装对象
        Brand brand = new Brand();
        brand.setCompanyName(companyName);
        brand.setBrandName(brandName);
        brand.setStatus(status);
        brand.setDescription(description);
        brand.setOrdered(ordered);

        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        //SqlSession sqlSession = sqlSessionFactory.openSession();
        //手动提交事务

        //自动提交事务
        SqlSession sqlSession = sqlSessionFactory.openSession(true);

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        BrandMapper.add(brand);

        Integer id= brand.getId();
        System.out.println(id);

        //手动提交事务
        //sqlSession.commit();

        //5.释放资源
        sqlSession.close();
    }


    @Test
    public void testupdate() throws IOException {
        //接收参数
        int status = 1;
        String companyName = "testupdate";
        String brandName = "uptate";
        String description = "testupdate";
        int ordered = 80;
        int id = 7;

        //封装对象
        Brand brand = new Brand();
        brand.setCompanyName(companyName);
        //brand.setBrandName(brandName);
        //brand.setStatus(status);
        //brand.setDescription(description);
        brand.setOrdered(ordered);
        brand.setId(id);

        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        //SqlSession sqlSession = sqlSessionFactory.openSession();
        //手动提交事务

        //自动提交事务
        SqlSession sqlSession = sqlSessionFactory.openSession(true);

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        int update = BrandMapper.update(brand);

        System.out.println(update);

        //手动提交事务
        //sqlSession.commit();

        //5.释放资源
        sqlSession.close();
    }


    @Test
    public void testdeleteBYid() throws IOException {
        //接收参数
        int i = 5;
        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession(true);

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        BrandMapper.deleteById(i);


        //5.释放资源
        sqlSession.close();
    }


    @Test
    public void testdeleteBYids() throws IOException {
        //接收参数
        int[] ids = {6,7};
        //1.获取SqlsessionFactory

        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        //2。获取Sqlsession对象

        SqlSession sqlSession = sqlSessionFactory.openSession(true);

        //3.获取mapper接口的代理对象
        BrandMapper BrandMapper = sqlSession.getMapper(BrandMapper.class);

        //4.执行方法
        BrandMapper.deleteByIds(ids);


        //5.释放资源
        sqlSession.close();
    }
}
